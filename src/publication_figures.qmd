---
title: "Publication figures"
---

```{r}
#| label: set-scene
#| echo: false
#| warning: false

pacman::p_load(dplyr, leaflet, patchwork, sf)
library(ggplot2)
library(scatterpie)
library(ggmap)  # For background maps (optional)
```


```{r}
source("../src/study_health_facilities.R")
map_cols <- c('#8dd3c7', '#d8b365', '#ef8a62', '#bebada', '#bdbdbd', '#bdbdbd', '#b3de69')


#-- 1. generate Kenya basemap

ke_map <- st_read("../../data/gadm41_KEN_shp/gadm41_KEN_0.shp") %>% st_transform(4326)

#-- 2. generate map of study sub-counties
kilifi_subcounty_list <- c("Ganze", "Kaloleni", "Kilifi North", "Kilifi South",
                           "Rabai", "Malindi", "Magarini") 
kilifi_subcounty <- st_read("../../data/gadm41_KEN_shp/gadm41_KEN_2.shp") %>%
  dplyr::filter(NAME_2 %in% c(kilifi_subcounty_list)) %>% st_transform(4326)


kilifi <- ggplot() +
  geom_sf(data = ke_map, fill = "white", color = "black",  size=2) +
  geom_sf(data = kilifi_subcounty, 
          fill = c("#636363")) + #c('#8dd3c7','#ffffb3','#bebada','#fb8072','#80b1d3','#fdb462','#b3de69')) +
  coord_sf(expand = FALSE) +
  geom_text(aes(x=38.4, y=-2.0, label = "Kilifi County")) +
  theme_void()
# kilifi

# crop map of Kilifi to show area around study sub-counties
kilifi_crop <- st_crop(ke_map, xmin = 39, xmax = 40.3,
                       ymin = -4, ymax = -2.25)

# # Ganze, Kaloleni, Kilifi North, Kilifi South, Malindi, Magarini, Rabai
# map_cols <- c('#8dd3c7', '#d8b365', '#ef8a62', '#bebada', '#bdbdbd', '#bdbdbd', '#b3de69')

# Magarini and Malindi mapped as gray


kilifi_crop_plt <- ggplot() +
  geom_sf(data = kilifi_crop, 
          fill = "white", color = "white", alpha = 0.6,  size=0) +
  geom_sf(data = kilifi_subcounty, 
          fill = map_cols) +
  scale_fill_manual(values = map_cols) +
  geom_point(data = health_facilities, 
             aes(x = Longitude, y = Latitude), 
             color = "red", shape = "+", size = 6, font="bold") +
  ggrepel::geom_text_repel(data = health_facilities, 
                           aes(x = Longitude, y = Latitude, 
                               label = short_f_name), 
                           size = 4, font = "bold",
                           box.padding = unit(0.2, "lines")) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, size=25),
        axis.text.y = element_text(size = 25),
        axis.title = element_text(size = 30),
        title = element_text(size=25)) +
  coord_sf(expand = FALSE) +
  annotation_scale(location = "bl", width_hint = 0.2) +
  annotation_north_arrow(location = "br", which_north = "true", 
                         pad_x = unit(0.05, "in"), pad_y = unit(0.05, "in"), size=0.02) + # kilifi_crop_plt
  theme_classic()

# combine the maps with Kenya inset
fig1_study_locations <- ggdraw(kilifi_crop_plt) +
  draw_plot({kilifi},
            x=0.19, y=0.67,
            width = 0.3, height = 0.3)
fig1_study_locations

ggsave("../images/publication_study_locations.png", plot = fig1_study_locations, bg = "transparent")


```

```{r}
# by subcounty
fig_malaria_subcounty <- ggplot(total_moh705A, aes(x = my, y = total, 
                                                      group = case_type, 
                                                      color = case_type, 
                                                      fill = case_type)) + 
  
  # Bar plot for suspected cases
  geom_col(data = total_moh705A %>% filter(case_type == "Suspected"), 
           aes(fill = case_type), 
           width = 1, alpha = 0.2) +  # Transparency to differentiate bars
  
  # Line plot for tested and confirmed cases
  geom_line(data = total_moh705A %>% filter(case_type != "Suspected"), 
            aes(color = case_type), 
            size = 0.7) + 
  
  # Points for tested and confirmed cases
  geom_point(data = total_moh705A %>% filter(case_type != "Suspected"), 
             aes(color = case_type), 
             size = 0.9) + 
  
  # Labels and theme
  labs(title = "", # paste("Monthly", title_text, "malaria cases"),
       x = "Month-Year of reporting",
       y = "Malaria",
       color = "Case Type",
       fill = "Case Type") + 
  
  # Ensure both color and fill use the same scale
  scale_color_manual(values = c(col_case[1], col_case[2], col_case[3])) +  
  scale_fill_manual(values = c(col_case[1], col_case[2], col_case[3])) +  
  
  facet_wrap(~ subcounty, ncol = 1) +  
  theme_minimal() +
  
  # Improve readability of the plot
  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 9),
        axis.text.y = element_text(size = 10),
        axis.title = element_text(size = 12),
        title = element_text(size = 12),
        strip.text = element_text(size = 12, face = "bold"),
        legend.text = element_text(size = 10),
        legend.title = element_blank(), # size = 10, face = "bold"
        legend.position = "top",  # Changed position
        legend.direction = "horizontal")  # Optional: horizontal legend)

ggsave("../images/publication_fig_malaria_subcounty.png", 
       plot = fig_malaria_subcounty, bg = "white")

```

```{r}
fxn_pub_net_subcounty <- function(data, x_var, x_axis_label){
  ggplot(data, 
         aes(x = !!sym(x_var), 
             y = reorder(sub_county, !!sym(x_var)))) +  # Removed fill from aes()
    
    # Use fill scale manually
    geom_col(fill = map_cols[c(1:4,7)]) +  # Fill applied here, not in aes()
    
    # Text labels - color will now work properly
    geom_text(aes(label = paste0(!!sym(x_var), "%")),
              hjust = 1.1, 
              size = 7, 
              color = "white",  # This will now be applied correctly
              fontface = "bold") +
    
    labs(x = x_axis_label,
         y = "Sub-County") +
    
    scale_x_continuous(labels = function(x) paste0(x, "%"), 
                       limits = c(0, 100)) +
    
    theme_minimal() +
    theme(axis.text = element_text(size = 16),
          axis.title = element_text(size = 25, face = "bold"),
          legend.position = "none")
}

fig_pub_own_net_subcounty <- fxn_fig_net_subcounty(total_subcounty_chp_reports, "prop_have_net", 
                                               "Own net")


# 2: proportion of people who slept under a net the previous night
fig_pub_use_net_subcounty <- fxn_fig_net_subcounty(total_subcounty_chp_reports, "prop_use_net", 
                                               "Use net") +
  theme(axis.title.y = "none")

combined_plot <- fig_pub_own_net_subcounty + fig_pub_use_net_subcounty + 
  plot_layout(nrow = 1)
```

```{r}
# by health facility
fxn_publication_moh705 <- function(data, ylab){
  fig <- ggplot(data, aes(x = my, y = count, 
                          group = case_type, 
                          color = case_type, 
                          fill = case_type)) + 
    
    # Bar plot for suspected cases
    geom_col(data = data %>% filter(case_type == "Suspected"), 
             aes(fill = case_type), 
             width = 1, alpha = 0.2) +  # Transparency to differentiate bars
    
    # Line plot for tested and confirmed cases
    geom_line(data = data %>% filter(case_type != "Suspected"), 
              aes(color = case_type), 
              size = 0.7) + 
    
    # Points for tested and confirmed cases
    geom_point(data = data %>% filter(case_type != "Suspected"), 
               aes(color = case_type), 
               size = 0.9) + 
    
    # Labels and theme
    labs(title = "", # paste("Monthly", title_text, "malaria cases"),
         x = "Month-Year of reporting",
         y = ylab,
         color = "Case Type",
         fill = "Case Type") + 
    
    # Ensure both color and fill use the same scale
    scale_color_manual(values = c(col_case[1], col_case[2], col_case[3])) +  
    scale_fill_manual(values = c(col_case[1], col_case[2], col_case[3])) +  
    
    facet_wrap(~ dispensary, ncol = 2) +  
    theme_minimal() +
    
    # Improve readability of the plot
    theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 9),
          axis.text.y = element_text(size = 10),
          axis.title = element_text(size = 12),
          title = element_text(size = 12),
          strip.text = element_text(size = 12, face = "bold"),
          legend.text = element_text(size = 10),
          legend.title = element_blank(), # size = 10, face = "bold"
          legend.position = "top",  # Changed position
          legend.direction = "horizontal")  # Optional: horizontal legend)
  
  return(fig)
}

publication_fig_moh705A <- fxn_publication_moh705(moh705A_long, "<5 Malaria")
ggsave("../images/publication_fig_moh705A.png", plot = publication_fig2_moh705A, bg = "white")

publication_fig_moh705B <- fxn_publication_moh705(moh705B_long, "â‰¥5 Malaria")
ggsave("../images/publication_fig_moh705B.png", plot = publication_fig_moh705B, bg = "white")

```





```{r}


# Sample data preparation (replace with your actual data)
# Assume your data has: lat, long, tested, positive
# health_facilities <- data.frame(
#   facility = c("A", "B", "C"),
#   lat = c(-3.65, -3.68, -3.63),
#   long = c(39.85, 39.82, 39.88),
#   tested = c(150, 200, 180),
#   positive = c(30, 80, 45)
# ) %>%
#   mutate(
#     negative = tested - positive,
#     positivity_rate = positive / tested
#   )

# Create pie chart data for each facility
pie_data <- health_facilities %>%
  mutate(
    radius = tested / max(tested) * 0.05,  # Scale pie size by total tested
    .before = 1
  ) %>%
  select(lat, long, radius, positive, negative)

register_stadiamaps("691aea22-611b-4526-9353-74b1a5a74966", write = TRUE)

# Get Kilifi background map (optional)
kilifi_map <- ggmap::get_stadiamap(
  bbox = c(left = 39.8, bottom = -3.7, right = 39.9, top = -3.6),
  zoom = 12, maptype = "stamen_toner_lite"
)
ggmap::ggmap(kilifi_map)

qmplot(Longitude, Latitude, data=health_facilities, color=I("red"))


# Plot
ggplot() +
  # Background map (comment out if unavailable)
  geom_sf(data = kilifi_map) +
  
  # Scatterpies
  geom_scatterpie(
    data = pie_data,
    aes(x = long, y = lat, r = radius),
    cols = c("positive", "negative"),
    color = NA,
    alpha = 0.8
  ) +
  
  # Color scale
  scale_fill_manual(
    name = "Malaria Test",
    values = c("positive" = "#e41a1c", "negative" = "#377eb8"),
    labels = c("Positive", "Negative")
  ) +
  
  # Add facility labels
  geom_text(
    data = health_facilities,
    aes(x = long, y = lat, label = paste0(round(positivity_rate*100, 1), "%"),
        vjust = -1.5, size = 3, color = "black")) +
  
  # Adjust coordinates
  coord_equal() +
  labs(
    title = "Malaria Positivity by Health Facility",
    subtitle = "Circle size = Total tested; % = Positivity rate",
    x = "Longitude", y = "Latitude"
  ) +
  theme_minimal() +
  theme(legend.position = "bottom")
```



```{r}

library(leaflet)
library(sf)
library(dplyr)

# 1. Load and prepare data
ke_map <- st_read("../data/gadm41_KEN_shp/gadm41_KEN_0.shp") %>% st_transform(4326)
kilifi_subcounty <- st_read("../data/gadm41_KEN_shp/gadm41_KEN_2.shp") %>%
  filter(NAME_2 %in% c("Ganze", "Kaloleni", "Kilifi North", "Kilifi South", 
                       "Rabai", "Malindi", "Magarini")) %>%
  st_transform(4326)

# 2. Create hospital icon (using Font Awesome)
hospital_icon <- makeAwesomeIcon(
  icon = 'hospital',
  markerColor = 'red',
  library = 'fa',
  iconColor = 'white'
)

# 3. Create base map with enhanced popups
leaflet_map <- leaflet() %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(
    data = ke_map,
    fillColor = "white",
    color = "#bdbdbd",
    weight = 2,
    fillOpacity = 0.6
  ) %>%
  addPolygons(
    data = kilifi_subcounty,
    fillColor = ~pal(NAME_2),
    color = "black",
    weight = 1,
    fillOpacity = 0.8,
    label = ~NAME_2,
    popup = paste0(
      "<strong>Subcounty:</strong> ", kilifi_subcounty$NAME_2, "<br>",
      "<strong>Area:</strong> ", round(st_area(kilifi_subcounty)/1e6, " kmÂ²"
      ),
      highlightOptions = highlightOptions(
        weight = 3,
        color = "#666",
        bringToFront = TRUE
      )
    ) %>%
      addAwesomeMarkers(
        data = health_facilities,
        lng = ~Longitude,
        lat = ~Latitude,
        icon = hospital_icon,
        label = ~short_f_name,
        popup = paste0(
          "<div style='font-size:14px;'>",
          "<strong><i class='fa fa-hospital'></i> ", health_facilities$short_f_name, "</strong><br>",
          "<strong>Type:</strong> ", health_facilities$facility_type, "<br>",
          "<strong>Subcounty:</strong> ", health_facilities$subcounty, "<br>",
          "<strong>Coordinates:</strong> ", 
          round(health_facilities$Longitude, 4), ", ", 
          round(health_facilities$Latitude, 4),
          "</div>"
        ),
        clusterOptions = markerClusterOptions(
          spiderfyOnMaxZoom = TRUE,
          showCoverageOnHover = FALSE,
          zoomToBoundsOnClick = TRUE
        )
      ) %>%
      addLegend(
        position = "bottomright",
        pal = pal,
        values = kilifi_subcounty$NAME_2,
        title = "Kilifi Subcounties"
      ) %>%
      addControl(
        html = "<div style='background:white;padding:5px;'><i class='fa fa-hospital' style='color:red;'></i> Health Facility</div>",
        position = "topright"
      )
    
    # 4. Enhanced subcounty function with better popups
    plot_kilifi_subcounty_leaflet <- function(subcounty_name) {
      subcounty_data <- kilifi_subcounty %>% filter(NAME_2 == subcounty_name)
      facilities <- health_facilities %>% filter(subcounty == subcounty_name)
      
      leaflet() %>%
        addProviderTiles(providers$CartoDB.Positron) %>%
        addPolygons(
          data = subcounty_data,
          fillColor = ~pal(NAME_2),
          color = "black",
          weight = 2,
          fillOpacity = 0.8,
          popup = paste0(
            "<strong>Subcounty:</strong> ", subcounty_data$NAME_2, "<br>",
            "<strong>Area:</strong> ", round(st_area(subcounty_data)/1e6, 1), " kmÂ²"
          )
        ) %>%
        addAwesomeMarkers(
          data = facilities,
          lng = ~Longitude,
          lat = ~Latitude,
          icon = hospital_icon,
          label = ~short_f_name,
          popup = paste0(
            "<div style='font-size:14px;'>",
            "<strong><i class='fa fa-hospital'></i> ", facilities$short_f_name, "</strong><br>"
            "</div>"
          )
        ) %>%
        addControl(
          html = paste0("<h4>", subcounty_name, " Health Facilities</h4>"),
          position = "topright"
        ) %>%
        setView(
          lng = mean(st_bbox(subcounty_data)[c(1,3)]),
          lat = mean(st_bbox(subcounty_data)[c(2,4)]),
          zoom = 11
        )
    }
    
    # 5. Save with dependencies
    htmlwidgets::saveWidget(
      widget = leaflet_map,
      file = "kilifi_health_map.html",
      libdir = "lib",
      selfcontained = FALSE
    )
    
    plot_kilifi_subcounty_leaflet("Ganze")
    ```